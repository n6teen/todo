require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/todo1s", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # Todo1. As you add validations to Todo1, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { title: 'mokeyType 55 wpm', status: false}
  }

  let(:invalid_attributes) {
    { title: '', status: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Todo1.create! valid_attributes
      get todo1s_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      todo1 = Todo1.create! valid_attributes
      get todo1_url(todo1)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_todo1_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      todo1 = Todo1.create! valid_attributes
      get edit_todo1_url(todo1)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Todo1" do
        expect {
          post todo1s_url, params: { todo1: valid_attributes }
        }.to change(Todo1, :count).by(1)
      end

      it "redirects to the created todo1" do
        post todo1s_url, params: { todo1: valid_attributes }
        expect(response).to redirect_to(todo1_url(Todo1.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Todo1" do
        expect {
          post todo1s_url, params: { todo1: invalid_attributes }
        }.to change(Todo1, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post todo1s_url, params: { todo1: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested todo1" do
      todo1 = Todo1.create! valid_attributes
      expect {
        delete todo1_url(todo1)
      }.to change(Todo1, :count).by(-1)
    end

    it "redirects to the todo1s list" do
      todo1 = Todo1.create! valid_attributes
      delete todo1_url(todo1)
      expect(response).to redirect_to(todo1s_url)
    end
  end
end
